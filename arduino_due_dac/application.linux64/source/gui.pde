/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void button1_click1(GButton source, GEvent event) { //_CODE_:sinus:349860:
  println("sinus - GButton >> GEvent." + event + " @ " + millis());
  dataSel = 1;
  aggiorna();
} //_CODE_:sinus:349860:

public void button1_click2(GButton source, GEvent event) { //_CODE_:tri:377017:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  dataSel = 2;
  aggiorna();
} //_CODE_:tri:377017:

public void button2_click1(GButton source, GEvent event) { //_CODE_:saw:881647:
  println("button2 - GButton >> GEvent." + event + " @ " + millis());
  dataSel = 3;
  aggiorna();
} //_CODE_:saw:881647:

public void button3_click1(GButton source, GEvent event) { //_CODE_:square:991442:
  println("button3 - GButton >> GEvent." + event + " @ " + millis());
  dataSel = 4;
  aggiorna();
} //_CODE_:square:991442:

public void button4_click1(GButton source, GEvent event) { //_CODE_:custom:771265:
  println("button4 - GButton >> GEvent." + event + " @ " + millis());
  dataSel = 0;
  aggiorna();
} //_CODE_:custom:771265:

public void custom_slider1_change1(GCustomSlider source, GEvent event) { //_CODE_:custom_slider1:420683:
  println("custom_slider1 - GCustomSlider >> GEvent." + event + " @ " + millis());
  newFreq = custom_slider1.getValueI();
} //_CODE_:custom_slider1:420683:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  sinus = new GButton(this, spazioLibero/6, (height * hp) + ((height - (height * hp)) / 2), lung, larg);
  sinus.setText("Sin");
  sinus.addEventHandler(this, "button1_click1");
  tri = new GButton(this, spazioLibero/3 + lung, (height * hp) + ((height - (height * hp)) / 2), lung, larg);
  tri.setText("Triangolare");
  tri.addEventHandler(this, "button1_click2");
  saw = new GButton(this, spazioLibero/2 + lung * 2, (height * hp) + ((height - (height * hp)) / 2), lung, larg);
  saw.setText("Dente di sega");
  saw.addEventHandler(this, "button2_click1");
  square = new GButton(this, spazioLibero/6*4 + lung * 3, (height * hp) + ((height - (height * hp)) / 2), lung, larg);
  square.setText("Quadra");
  square.addEventHandler(this, "button3_click1");
  custom = new GButton(this, spazioLibero/6*5 + lung * 4, (height * hp) + ((height - (height * hp)) / 2), lung, larg);
  custom.setText("Custom");
  custom.addEventHandler(this, "button4_click1");
  custom_slider1 = new GCustomSlider(this, 1300, 20, 550, 100, "grey_blue");
  custom_slider1.setShowValue(true);
  custom_slider1.setRotation(PI/2, GControlMode.CORNER);
  custom_slider1.setLimits(500.0, 1000.0, 0.0);
  custom_slider1.setNumberFormat(G4P.DECIMAL, 2);
  custom_slider1.setOpaque(false);
  custom_slider1.addEventHandler(this, "custom_slider1_change1");
}

// Variable declarations 
// autogenerated do not edit
GButton sinus; 
GButton tri; 
GButton saw; 
GButton square; 
GButton custom; 
GCustomSlider custom_slider1; 